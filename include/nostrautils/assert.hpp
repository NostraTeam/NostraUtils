#ifndef NOU_ASSERT_HPP
#define NOU_ASSERT_HPP

/**
\file nostrautils/assert.hpp

\author  Lukas Reichmann
\version 1.1.0.0
\since   1.1.0.0

\brief
A component that provides a simple runtime assertion system.

\details
Assertions should only be used for debugging purposes. Every assertion that fails during runtime should be
considered a bug.

To place an assertion, use the macro \ilc{NOU_ASSERT()}.

\par_example
\code{.cpp}
NOU_ASSERT(a == 5); //checks if the variable a is equals 5. the assertion fails, if a is NOT equals 5.
\endcode

In addition to that is the assertion system configurable. A user can enable and disable behavior when an 
assertion fails.

To change the behavior, attributes in the struct \ilc{nou::AssertionSettings()} can be changed.

For a full list on the different behaviors provided by \ilc{nou::AssertionSettings()} see the documentation 
of that struct.

\par_example
\code{.cpp}
//prints a message to std::cout on failure; by default this is always activated
nou::AssertionSettings::printOnFail = true; 

//exits the program using exit(); by default this is always deactivated
nou::AssertionSettings::exitOnFail = true; 
\endcode

For a more detailed example, see \link assert.ex.cpp here\endlink.

\note
Unlike \ilc{assert()} from the C standard library, the assert macro provided in this component will 
not terminate the program by default.
*/

/**
\example assert.ex.cpp

An example that demonstrates the usage of the assert component.
*/

#ifndef NOU_TYPES_HPP
#include "nostrautils/types.hpp"
#endif

#ifndef NOU_STDDEF_HPP
#include "nostrautils/stddef.hpp"
#endif

/**
\param ... 
The expression to check. This as a variadic parameter to allow expressions that have commas in them.

\brief 
Checks whether \p ... evaluates to \ilc{true}. 

\details
If the assertion fails, the behaviors that are enabled in \ilc{nou::AssertionSettings} will be 
triggered.

In addition to that, this macro can be completely disabled by defining \ilc{NOU_DISABLE_ASSERT} before
including assert.hpp. If the macro is disabled, it will still be defined but expand to nothing.

\author  Lukas Reichmann
\version 1.1.0.0
\since   1.1.0.0
*/
#ifndef NOU_ASSERT
#    ifndef NOU_DISABLE_ASSERT
#        define NOU_ASSERT(...) nou::internal::assertImpl(__VA_ARGS__, "Assertion failed: " \
                NOU_STRINGIFY(__VA_ARGS__) " " NOU_FUNC_NAME " " __FILE__ ":" NOU_LINE_STRING, \
                NOU_FUNC_NAME, __LINE__, __FILE__)
#    else
#        define NOU_ASSERT(...)
#    endif
#endif

namespace nou
{
	/**
	\brief 
	A struct that provides static variables that control the behavior of \ilc{NOU_ASSERT()}.
	
	\details
	The order in which the behaviors will be triggered is (this list assumes that all of the behaviors are 
    enabled; if behaviors are disabled, they will simply be ignored):
	<ol>
		<li>\ilc{printOnFail}</li>
		<li>\ilc{callbackOnFail}</li>
		<li>\ilc{breakOnFail}</li>
		<li>\ilc{exitOnFail}</li>
	</ol>

	\author  Lukas Reichmann
	\version 1.1.0.0
	\since   1.1.0.0
	*/
	struct AssertionSettings
	{
		AssertionSettings() = delete; //only static members; no need to construct

		/**
		\param msg
		The message that was generated by \ilc{NOU_ASSERT()}. This is the same message that would get printed 
        if \ilc{printOnFail} is enabled.
		
		\param fnName
		The name of the function in which the assertion failed. This name is created using 
		\ilc{\link NOU_FUNC_NAME NOU_FUNC_NAME\endlink}.
		
		\param line
		The line in which the assertion failed.
		
		\param file
		The file in which the assertion failed.

		\brief 
		The type of \link nou::AssertionSettings::callbackOnFail callbackOnFail\endlink.

		\see callbackOnFail

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0
		*/
		using CallbackType = void(*) (const char8 *msg, const char8 *fnName, uint32 line, const char8 *file);

		/**
		\brief 
		If true, \ilc{nou::internal::debugbreak()} will be called as soon as an assertion fails.
		
		\details
		By default, this variable is set to \ilc{false}.

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0
		*/
		static boolean breakOnFail;

		/**
		\brief 
		If true, an error message is printed to \ilc{std::cout} as soon as an assertion fails.
		
		\details
		By default, this variable is set to \ilc{true}.

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0
		*/
		static boolean printOnFail;

		/**
		\brief 
		If true, \ilc{exit()} will be called as soon as an assertion fails.
		
		\details
		By default, this variable is set to \ilc{false}.

		\see exitCode

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0
		*/
		static boolean exitOnFail;

		/**
		\brief 
		The exit code that will be passed to \ilc{exit()} if that function is called due to an  assertion.
		
		\details
		This variable has only an effect if \ilc{\link nou::AssertionSettings::exitOnFail exitOnFail\endlink} 
        is set to \ilc{true}. By default, this variable is set to -1.

		\note
		The type of this variable is purposefully \ilc{int} because this is the type that \ilc{exit()} 
        expects as its parameter.

		\see exitOnFail

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0
		*/
		static int exitCode;

		/**
		\brief 
		A pointer to a function that will be called as soon as an assertion fails.
		
		\details
		The callback will only be called if it is not \ilc{nullptr}. By default, this variable is set  to 
        \ilc{nullptr}.

		\see CallbackType

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0
		*/
		static CallbackType callbackOnFail;
	};

	namespace internal
	{

		/**
		\brief 
		Pauses the execution of a program / hits a breakpoint in a debugger.
		
		\details
		Pauses the execution of a program / hits a breakpoint in a debugger.
		On systems that use MSVC (\ilc{NOU_COMPILER == NOU_COMPILER_MSVC)}, this will call 
        \ilc{__debugbreak()}.
		On POSIX systems, raise(SIGTRAP) will be called. On all other systems, nothing happens.

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0

        \todo This function is not yet properly implemented.
		*/
		NOU_FUNC void debugbreak();

		/**
		\param b      
		The expression to evaluate.
		
		\param msg    
		The message that will be used by the behaviors \ilc{\link nou::AssertionSettings::printOnFail 
		printOnFail\endlink} and \ilc{\link nou::AssertionSettings::callbackOnFail callbackOnFail\endlink.}
		
		\param fnName 
		The name of the function in which the assertion failed. This name is created using 
		\ilc{NOU_FUNC_NAME}.
		
		\param line   
		The line in which the assertion failed.
		
		\param file   
		The file in which the assertion failed.
		
		\brief 
		The "back-end" function of \ilc{NOU_ASSERT()}.

		\author  Lukas Reichmann
		\version 1.1.0.0
		\since   1.1.0.0
		*/
		NOU_FUNC void assertImpl(boolean b, const char8 *msg, const char8 *fnName, uint32 line, 
			const char8 *file);
	}
}

#endif